  AWSTemplateFormatVersion: '2010-09-09'

  Description: 'The Vpc, subnets, nacl, internet gateway and route table configuration and settings for opinion cloud services.'

  Parameters:
    VPCName:
      Description: The name of the VPC being created.
      Type: String
      Default: odin

  Mappings:
  ###########################################################################
  ### Hard values for the subnet masks. These masks define
  ### the range of internal IP addresses that can be assigned.

  ### * Region: Mumbai         :: ap-south-1
  ### * Total Azs              :: 3 ==> ap-south-1a || ap-south-1b || ap-south-1c
  
  ### Custom VPC Configurations
  ### * VPC CIDR               :: 10.0.0.0/16                  | Total IpAddress : ~65,000
  ### The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  
  ### * Subnets                :: 4 ==> 2 public - 2 private

  ### * Subnet 1: Public CIDR  :: 10.0.1.0/24              ||||| 
  ###   Range                  :: 10.0.1.0 - 10.0.1.255        | 
  #                                                            | Az :: ap-south-1a
  ### * Subnet 2: Private CIDR :: 10.0.2.0/24                  |
  ###   Range                  :: 10.0.2.0 - 10.0.2.255    |||||    

  ### * Subnet 3: Public CIDR  :: 10.0.20.0/24             ||||| 
  ###   Range                  :: 10.0.20.0 - 10.0.20.255      | 
  #                                                            | Az :: ap-south-1b
  ### * Subnet 4: Private CIDR :: 10.0.21.0/24                 |
  ###   Range                  :: 10.0.21.0 - 10.0.21.255  |||||    
  
  ### If you need more IP addresses (perhaps you have so many
  ### instances that you run out) then you can customize these
  ### ranges to add more
  ###########################################################################
    SubnetConfig:
      VPC:
        CIDR: 10.0.0.0/16
      PublicSubnet1:
        CIDR: 10.0.1.0/24
      PublicSubnet2:
        CIDR: 10.0.20.0/24
      PrivateSubnet1:
        CIDR: 10.0.2.0/24
      PrivateSubnet2:
        CIDR: 10.0.21.0/24

    AZRegions:
      ap-south-1:
        AZs: ['a', 'b']

  Resources:
  ################################
  ### Custom VPC
  ################################
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        EnableDnsSupport: true
        EnableDnsHostnames: true
        CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]
        Tags:
          -
            Key: Application
            Value: !Ref 'AWS::StackName'
          -
            Key: Network
            Value: Public
          -
            Key: Name
            Value: !Ref 'VPCName'

  ################################
  ### * For AZs :: ap-south-1a ::
  ### 
  ### 1. PublicSubnet1
  ### Containers in the public subnets have public IP 
  ### addresses and the routing table sends network 
  ### traffic via the internet gateway. 
  ###
  ### 2. PrivateSubnet1
  ################################
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: 
          !Sub
            - '${AWS::Region}${AZ}'
            - AZ: !Select [ 0, !FindInMap [ 'AZRegions', !Ref 'AWS::Region', 'AZs' ] ]
        CidrBlock: !FindInMap ['SubnetConfig' ,'PublicSubnet1' ,'CIDR']
        MapPublicIpOnLaunch: true
        Tags:
          -
            Key: Application
            Value: !Ref 'AWS::StackName'
          -
            Key: Network
            Value: Public
          -
            Key: Name
            Value: !Sub '${VPCName}::az-1a:public-subnet-1'
    PrivateSubnet1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref 'VPC'
        AvailabilityZone:
          !Sub
            - '${AWS::Region}${AZ}'
            - AZ: !Select [ 0, !FindInMap [ 'AZRegions', !Ref 'AWS::Region', 'AZs' ] ]
        CidrBlock: !FindInMap [SubnetConfig , PrivateSubnet1 , CIDR]
        Tags:
          -
            Key: Application
            Value: !Ref 'AWS::StackName'
          -
            Key: Network
            Value: Private
          -
            Key: Name
            Value: !Sub '${VPCName}::az-1a:private-subnet-1'

  ################################
  ### * For AZs :: ap-south-1b ::
  ### 
  ### 1. PublicSubnet2
  ### Containers in the public subnets have public IP 
  ### addresses and the routing table sends network 
  ### traffic via the internet gateway. 
  ###
  ### 2. PrivateSubnet2
  ################################
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref 'VPC'
        AvailabilityZone:
          !Sub
            - '${AWS::Region}${AZ}'
            - AZ: !Select [ 1, !FindInMap [ 'AZRegions', !Ref 'AWS::Region', 'AZs' ] ]
        CidrBlock: !FindInMap ['SubnetConfig' , 'PublicSubnet2' , 'CIDR']
        MapPublicIpOnLaunch: true
        Tags:
          -
            Key: Application
            Value: !Ref AWS::StackName
          -
            Key: Network
            Value: Public
          -
            Key: Name
            Value: !Sub '${VPCName}::az-1b:public-subnet-2'
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref 'VPC'
        AvailabilityZone:
          !Sub
            - '${AWS::Region}${AZ}'
            - AZ: !Select [ 1, !FindInMap [ 'AZRegions', !Ref 'AWS::Region', 'AZs' ] ]
        CidrBlock: !FindInMap ['SubnetConfig' ,'PrivateSubnet2', 'CIDR']
        Tags:
          -
            Key: Application
            Value:
              Ref: AWS::StackName
          -
            Key: Network
            Value: Private
          -
            Key: Name
            Value: !Sub '${VPCName}::az-1b:private-subnet-2'
    
  ################################
  ### * Internet Gateway
  ### Gateway Attachment to VPC 
  ################################
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          -
            Key: Application
            Value: !Ref 'AWS::StackName'
          -
            Key: Network
            Value: Public
          -
            Key: Name
            Value: !Join ['::', [!Ref 'VPCName', 'IGW' ]]
    GatewayToInternet:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

  ################################
  ### * Route Tables
  ### 
  ### 1. Public Route Table
  ### 2. Route which is added to the internet gateway 
  ###    0.0.0.0/0 ==> which routes all the traffic out into the world
  ### 3. PublicSubnet1 <--> Public Route | Allowing all traffic to flow  
  ### 4. PublicSubnet2 <--> Public Route | in and out the public subnet
  ################################
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          -
            Key: Application
            Value: !Ref 'AWS::StackName'
          -
            Key: Network
            Value: Public
          -
            Key: Name
            Value: !Join ['::', [!Ref 'VPCName', 'public-route-table' ]]
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: GatewayToInternet
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PublicSubnetRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetRouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

  ################################
  ### * Network Acls
  ### 
  ### 1. Network Acl rule :: 100
  ### 2. Network Acl rule :: 110
  ### 3. Network Acl rule :: 120
  ### 4. Network Acl rule :: 140
  ###   
  ###   0.0.0.0/0 :: from anywhere 
  ###   Allow ports 
  ###   1. 80
  ###   2. 22
  ###   3. 1024 - 65535 (https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#nacl-ephemeral-ports)
  ###   4. 443
  ################################
    PublicNetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId: !Ref VPC
        Tags:
          -
            Key: Application
            Value: !Ref 'AWS::StackName'
          -
            Key: Network
            Value: Public
          -
            Key: Name
            Value: !Join ['::', [!Ref 'VPCName', 'public-nacl']]
    InboundHTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 80
          To: 80
    InboundHTTPSNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 110
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 443
          To: 443      
    InboundSSHNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:  
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 120
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 22
          To: 22
    InboundResponsePortsNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 140
        Protocol: 6
        RuleAction: allow
        Egress: false
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535

    ### Outbound Rules     
    OutBoundHTTPNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties: 
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 80
          To: 80
    OutBoundHTTPSNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 110
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 443
          To: 443
    OutBoundSSHNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 120
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 22
          To: 22
    OutBoundResponsePortsNetworkAclEntry:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PublicNetworkAcl
        RuleNumber: 140
        Protocol: 6
        RuleAction: allow
        Egress: true
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 1024
          To: 65535

  ################################
  ### * Subnet Network Association
  ###
  ### 1. Public Subnet 1 association
  ### 2. Public Subnet 2 association
  ### 
  ################################
    PublicSubnetNetworkAclAssociation1:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        NetworkAclId: !Ref PublicNetworkAcl
    PublicSubnetNetworkAclAssociation2:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId: !Ref PublicSubnet2
        NetworkAclId: !Ref PublicNetworkAcl

  ################################
  ### * Private Route Table
  ###
  ### 1. Private Subnet 1 Route Table Association
  ### 2. Private Subnet 2 Route Table Association
  ################################
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          -
            Key: Name
            Value: !Join ['::', [!Ref 'VPCName', 'private-route-table']]
    PrivateSubnetRouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable
    PrivateSubnetRouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

  Outputs:
    VPCId:
      Description: VPCId of VPC
      Value: !Ref VPC
      Export:
        Name: !Sub '${AWS::StackName}::${AWS::Region}:vpc'
    PublicSubnet1:
      Description: SubnetId of public subnet 1
      Value: !Ref PublicSubnet1
      Export:
        Name: !Sub '${AWS::StackName}::az-1a:public-subnet-1'
    PublicSubnet2:
      Description: SubnetId of public subnet 2
      Value: !Ref PublicSubnet2
      Export:
        Name: !Sub '${AWS::StackName}::az-1b:public-subnet-2'
    PrivateSubnet1:
      Description: SubnetId of private subnet 1
      Value: !Ref PrivateSubnet1
      Export:
        Name: !Sub '${AWS::StackName}::az-1a:private-subnet-1'
    PrivateSubnet2:
      Description: SubnetId of private subnet 2
      Value: !Ref PrivateSubnet2
      Export:
        Name: !Sub '${AWS::StackName}::az-1b:private-subnet-2'
    DefaultSecurityGroup:
      Description: DefaultSecurityGroup Id
      Value: !GetAtt VPC.DefaultSecurityGroup
      # Export:
      #   Name: !Sub '${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup